"""empty message

Revision ID: 2dcc271169dd
Revises: 
Create Date: 2021-05-02 11:36:30.271575

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2dcc271169dd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cars',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('model', sa.String(), nullable=True),
    sa.Column('doors', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('salepesi')
    op.drop_table('salapesislot')
    op.drop_table('sedute')
    op.drop_table('istruttori')
    op.drop_table('corsislot')
    op.drop_table('corsi')
    op.drop_table('slot')
    op.drop_table('nonabbonati')
    op.drop_table('abbonamenti')
    op.drop_table('prenotazioni')
    op.drop_table('clienti')
    op.drop_table('abbonatisedute')
    op.drop_table('stanze')
    op.drop_table('utenti')
    op.drop_table('abbonati')
    op.drop_table('altri')
    op.drop_table('giorni')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('giorni',
    sa.Column('data', sa.DATE(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('data', name='giorni_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('altri',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['utenti.id'], name='altri_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='altri_pkey')
    )
    op.create_table('abbonati',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('abbonamento', postgresql.ENUM('sala_pesi', 'corsi', 'completo', 'prova', name='abbonamento_t'), autoincrement=False, nullable=False),
    sa.Column('datainizioabbonamento', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('datafineabbonamento', sa.DATE(), autoincrement=False, nullable=True),
    sa.CheckConstraint('datafineabbonamento > datainizioabbonamento', name='abbonati_check'),
    sa.ForeignKeyConstraint(['abbonamento'], ['abbonamenti.tipo'], name='abbonati_abbonamento_fkey'),
    sa.ForeignKeyConstraint(['id'], ['clienti.id'], name='abbonati_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='abbonati_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('utenti',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cognome', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('datanascita', sa.DATE(), autoincrement=False, nullable=True),
    sa.CheckConstraint('datanascita < CURRENT_DATE', name='utenti_datanascita_check'),
    sa.PrimaryKeyConstraint('id', name='utenti_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('stanze',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dimensione', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint('dimensione > 0', name='stanze_dimensione_check'),
    sa.PrimaryKeyConstraint('id', name='stanze_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('abbonatisedute',
    sa.Column('abbonato', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('seduta', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['abbonato'], ['abbonati.id'], name='abbonatisedute_abbonato_fkey'),
    sa.ForeignKeyConstraint(['seduta'], ['sedute.id'], name='abbonatisedute_seduta_fkey'),
    sa.PrimaryKeyConstraint('abbonato', 'seduta', name='abbonatisedute_pkey')
    )
    op.create_table('clienti',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['utenti.id'], name='clienti_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clienti_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('prenotazioni',
    sa.Column('abbonato', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('slot', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['abbonato'], ['abbonati.id'], name='prenotazioni_abbonato_fkey'),
    sa.ForeignKeyConstraint(['slot'], ['slot.id'], name='prenotazioni_slot_fkey'),
    sa.PrimaryKeyConstraint('abbonato', 'slot', name='prenotazioni_pkey')
    )
    op.create_table('abbonamenti',
    sa.Column('tipo', postgresql.ENUM('sala_pesi', 'corsi', 'completo', 'prova', name='abbonamento_t'), autoincrement=False, nullable=False),
    sa.Column('costo', sa.REAL(), autoincrement=False, nullable=True),
    sa.CheckConstraint('costo > (0)::double precision', name='abbonamenti_costo_check'),
    sa.PrimaryKeyConstraint('tipo', name='abbonamenti_pkey')
    )
    op.create_table('nonabbonati',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['clienti.id'], name='nonabbonati_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nonabbonati_pkey')
    )
    op.create_table('slot',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('personemax', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('giorno', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('orainizio', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('orafine', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('orafine > orainizio', name='slot_check'),
    sa.CheckConstraint('personemax > 0', name='slot_personemax_check'),
    sa.ForeignKeyConstraint(['giorno'], ['giorni.data'], name='slot_giorno_fkey'),
    sa.PrimaryKeyConstraint('id', name='slot_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('corsi',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('iscrittimax', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('istruttore', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stanza', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.CheckConstraint('iscrittimax > 0', name='corsi_iscrittimax_check'),
    sa.ForeignKeyConstraint(['istruttore'], ['istruttori.id'], name='corsi_istruttore_fkey'),
    sa.ForeignKeyConstraint(['stanza'], ['stanze.id'], name='corsi_stanza_fkey'),
    sa.PrimaryKeyConstraint('id', name='corsi_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('corsislot',
    sa.Column('corso', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('slot', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['corso'], ['corsi.id'], name='corsislot_corso_fkey'),
    sa.ForeignKeyConstraint(['slot'], ['slot.id'], name='corsislot_slot_fkey'),
    sa.PrimaryKeyConstraint('corso', 'slot', name='corsislot_pkey')
    )
    op.create_table('istruttori',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['utenti.id'], name='istruttori_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='istruttori_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sedute',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('corso', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dataseduta', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['corso'], ['corsi.id'], name='sedute_corso_fkey'),
    sa.PrimaryKeyConstraint('id', name='sedute_pkey')
    )
    op.create_table('salapesislot',
    sa.Column('salapesi', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('slot', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['salapesi'], ['salepesi.id'], name='salapesislot_salapesi_fkey'),
    sa.ForeignKeyConstraint(['slot'], ['slot.id'], name='salapesislot_slot_fkey'),
    sa.PrimaryKeyConstraint('salapesi', 'slot', name='salapesislot_pkey')
    )
    op.create_table('salepesi',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dimensione', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint('dimensione > 0', name='salepesi_dimensione_check'),
    sa.PrimaryKeyConstraint('id', name='salepesi_pkey')
    )
    op.drop_table('cars')
    # ### end Alembic commands ###
